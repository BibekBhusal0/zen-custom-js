name: Update theme.json and Format

permissions:
  contents: write

on:
  push:
    branches:
  workflow_dispatch:

jobs:
  update_and_format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant read permissions
        run: find . -name "theme.json" -print0 | xargs -0 chmod a+r

      - name: Update theme.json
        id: update_theme
        run: |
          python <<EOF
          import os
          import json
          import subprocess

          def get_git_modified_date_for_directory(dir_path):
              try:
                  result = subprocess.run(
                      ['git', 'log', '-1', '--format=%ad', '--date=short', '--', dir_path],
                      capture_output=True, text=True, check=True
                  )
                  date = result.stdout.strip()
                  print(f"Directory {dir_path} last git modified date: {date}")
                  return date
              except subprocess.CalledProcessError:
                  print(f"Could not get git log for directory {dir_path}")
                  return None

          def normalize_json(data):
              return json.dumps(data, indent=2, separators=(',', ': '), ensure_ascii=False)

          def update_theme_json(theme_path):
              try:
                  dir_path = os.path.dirname(theme_path)
                  latest_date = get_git_modified_date_for_directory(dir_path)
                  if not latest_date:
                      print(f"No git history for directory {dir_path}")
                      return False

                  with open(theme_path, 'r', encoding='utf-8') as f:
                      original_data = json.load(f)

                  if original_data.get('updatedAt') == latest_date:
                      print(f"Unchanged {theme_path} — updatedAt already set to {latest_date}")
                      return False

                  updated_data = dict(original_data)
                  updated_data['updatedAt'] = latest_date

                  original_json = normalize_json(original_data)
                  updated_json = normalize_json(updated_data)

                  if original_json == updated_json:
                      print(f"Unchanged {theme_path} — no structural changes")
                      return False

                  with open(theme_path, 'w', encoding='utf-8') as f:
                      f.write(updated_json + '\n')

                  print(f"Updated {theme_path} with date {latest_date}")
                  return True

              except Exception as e:
                  print(f"Error processing {theme_path}: {e}")
                  return False

          result = subprocess.run(['find', '.', '-name', 'theme.json', '-print0'], capture_output=True, text=True)
          files = result.stdout.split('\0')

          updated_any = False
          for file in filter(None, files):
              if update_theme_json(file):
                  updated_any = True

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"updated={'true' if updated_any else 'false'}\n")
          EOF

      - name: Commit theme.json changes
        if: steps.update_theme.outputs.updated == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Update theme.json"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          cache: 'npm'

      - name: Install dependencies
        run: npm install --global prettier

      - name: Run Prettier
        run: npm run format

      - name: Commit formatting changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Auto format"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
